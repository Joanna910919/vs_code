def cksum_twid(idstr):
    '''compute checksum for Taiwan ID; use tuple for data that will be changed'''
    code1 = ord(idstr[0])   ### convert first Eng character to two-digit number
    cmap = (10, 11, 12, 13, 14, 15, 16, 17, 34, 18, 19, 20, 21, 22, 35, 23, 24, 25, 26, 27, 28, 29, 32, 30, 31, 33)
    num1 = cmap[code1 - 65]
    newid = str(num1) + idstr[1:]
    weight = (1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1)
    # checksum = 0
    # for i in range(0, 11):
    #     checksum += weight[i] * int(newid[i])
    # for apair in zip(newid, weight):    ### zip
    #     checksum += apair[1] * int(apair[0])


    out = map(lambda apair: apair[1] * int(apair[0]), zip(newid, weight))
    checksum = sum(out)
    print('checksum =%d' % checksum)

id = 'A123456789'
print(cksum_twid(id))


### zipping two variable
newid = '10123456789'
weight = (1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1)

for apair in zip(newid, weight):
    print(apair)


### lambda operator 定義較簡單函數
def f1(x):
    return x ** 2
print(f1(8))
'''VS'''
f2 = lambda x: x ** 2
print(f2(8))

### map operator
list1 = [3, 4, 5, 1.2, 7, 10, 89]
out1 = map(f1, list1)
print(list(out1))

out2 = map(lambda x: x ** 2, list1)
print(list(out2))